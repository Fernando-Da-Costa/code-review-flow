name: Criar Issue de Teste

on:
  push:


jobs:
  Criar-Issue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Criar Issue via API
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: "Issue de Teste Autom√°tica"
          content-filepath: .github/ISSUE_TEMPLATE/general_issue.md
          labels: needs-review
          token: ${{ secrets.MY_PAT }}

      - name: Instalar GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh jq

      - name: Aguarda cria√ß√£o da issue
        run: sleep 5

      - name: Obter √∫ltima issue criada
        id: get_issue
        run: |
          ISSUE=$(gh issue list --limit 1 --label "needs-review" --state open --json url,id --jq '.[0]')
          ISSUE_URL=$(echo "$ISSUE" | jq -r '.url')
          ISSUE_ID=$(echo "$ISSUE" | jq -r '.id')
          echo "ISSUE_URL=$ISSUE_URL" >> $GITHUB_ENV
          echo "ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.MY_PAT }}

      - name: Obter ID do ProjectV2
        id: get_project
        run: |
          PROJECT_INFO=$(gh api graphql -f query='
            {
              user(login: "Fernando-Da-Costa") {
                projectsV2(first: 10) {
                  nodes {
                    id
                    title
                  }
                }
              }
            }' --jq '.data.user.projectsV2.nodes[] | select(.title == "PR Review Board")')
          PROJECT_ID=$(echo "$PROJECT_INFO" | jq -r '.id')
          PROJECT_NAME=$(echo "$PROJECT_INFO" | jq -r '.title')
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.MY_PAT }}

      - name: Adicionar issue ao Project Board via GraphQL
        run: |
          echo "Adicionando issue $ISSUE_URL ao projeto $PROJECT_ID"
          if [ -z "$ISSUE_ID" ] || [ -z "$PROJECT_ID" ]; then
            echo "‚ùåERROR: ISSUE_ID ou PROJECT_ID est√° vazio"
            exit 1
          fi
          gh api graphql -f query='
            mutation($projectId:ID!, $contentId:ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                item {
                  id
                }
              }
            }' \
            -f projectId="$PROJECT_ID" \
            -f contentId="$ISSUE_ID"
        env:
          GH_TOKEN: ${{ secrets.MY_PAT }}
          ISSUE_ID: ${{ env.ISSUE_ID }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          ISSUE_URL: ${{ env.ISSUE_URL }}

      - name: Notificar no Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_ISSUES }}
          SLACK_PAYLOAD: |
            {
              "text": "*Projeto:* `${{ env.PROJECT_NAME }}`\n*Branch:* `${{ github.ref_name }}`\nüöÄ Nova issue criada: <${{ env.ISSUE_URL }}|Ver Issue>"
            }

